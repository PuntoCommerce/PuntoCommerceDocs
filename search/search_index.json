{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#welcome-to-punto-commerce-documentation","title":"Welcome to Punto Commerce Documentation","text":""},{"location":"#introduction","title":"Introduction","text":"<p>Welcome to our documentation site! Here, you'll find all the information you need to get started with our development evironment.</p>"},{"location":"#getting-started","title":"Getting Started","text":"<p>If you're new to our product, here are some key resources to help you get started:</p> <ul> <li>Internal Documentation</li> <li>External Documentation</li> <li>Aditional Resources</li> </ul>"},{"location":"#features","title":"Features","text":"<p>Learn about the exciting features our product offers:</p> <ul> <li>Searching</li> <li>Feature 2</li> </ul> <p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"#homepage","title":"Homepage","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#code-annotation-examples","title":"Code Annotation Examples","text":""},{"location":"#codeblocks","title":"Codeblocks","text":"<p>Some <code>code</code> goes here.</p>"},{"location":"#plain-codeblock","title":"Plain codeblock","text":"<p>A plain codeblock:</p> <pre><code>Some code here\ndef myfunction()\n// some comment\n</code></pre>"},{"location":"#code-for-a-specific-language","title":"Code for a specific language","text":"<p>Some more code with the <code>py</code> at the start:</p> <pre><code>import tensorflow as tf\ndef whatever()\n</code></pre>"},{"location":"#with-a-title","title":"With a title","text":"bubble_sort.py<pre><code>def bubble_sort(items):\nfor i in range(len(items)):\nfor j in range(len(items) - 1 - i):\nif items[j] &gt; items[j + 1]:\nitems[j], items[j + 1] = items[j + 1], items[j]\n</code></pre>"},{"location":"#with-line-numbers","title":"With line numbers","text":"<pre><code>def bubble_sort(items):\nfor i in range(len(items)):\nfor j in range(len(items) - 1 - i):\nif items[j] &gt; items[j + 1]:\nitems[j], items[j + 1] = items[j + 1], items[j]\n</code></pre>"},{"location":"#highlighting-lines","title":"Highlighting lines","text":"<pre><code>def bubble_sort(items):\nfor i in range(len(items)):\nfor j in range(len(items) - 1 - i):\nif items[j] &gt; items[j + 1]:\nitems[j], items[j + 1] = items[j + 1], items[j]\n</code></pre>"},{"location":"#icons-and-emojs","title":"Icons and Emojs","text":""},{"location":"SFCC%20B2C/Sandbox%20Configurations/SandboxCreation/","title":"Sandbox Creation","text":""},{"location":"SFCC%20B2C/Sandbox%20Configurations/SandboxCreation/#overview","title":"Overview","text":"<p>This document describes the steps to create a sandbox in SFCC B2C.</p>"},{"location":"SFCC%20B2C/Sandbox%20Configurations/SandboxCreation/#prerequisites","title":"Prerequisites","text":""},{"location":"SFCC%20B2C/Staging-Production/DeployCodeToStaging/","title":"Deploying Code to Staging","text":""},{"location":"SFCC%20B2C/Staging-Production/DeployCodeToStaging/#overview","title":"Overview","text":"<p>This document describes the steps to deploy code to staging environment.</p>"},{"location":"SFCC%20B2C/Staging-Production/DeployCodeToStaging/#prerequisites","title":"Prerequisites","text":""},{"location":"SFCC%20B2C/Staging-Production/DomainConfiguration/","title":"Domain Setup","text":""},{"location":"SFCC%20B2C/Staging-Production/DomainConfiguration/#overview","title":"Overview","text":"<p>This document describes the steps to configure a domain in SFCC B2C.</p>"},{"location":"SFCC%20B2C/Staging-Production/DomainConfiguration/#prerequisites","title":"Prerequisites","text":""},{"location":"SFCC%20B2C/Staging-Production/DomainSSLSetup/","title":"Domain SSL Setup","text":""},{"location":"SFCC%20B2C/Staging-Production/DomainSSLSetup/#overview","title":"Overview","text":"<p>This document describes the steps to configure a domain with SSL certificate in SFCC B2C.</p>"},{"location":"SFCC%20B2C/Staging-Production/DomainSSLSetup/#prerequisites","title":"Prerequisites","text":""},{"location":"coding/1.-%20Best%20Practices/BestpracticesPage/","title":"Coding Best Practices","text":""},{"location":"coding/1.-%20Best%20Practices/BestpracticesPage/#11-follow-a-coding-standard","title":"1.1 Follow a coding standard","text":"<p>Adopt a recognized coding standard and follow style conventions for the language you are using (eg. SFCC with CommonJs and MVC).</p>"},{"location":"coding/1.-%20Best%20Practices/BestpracticesPage/#12-descriptive-names","title":"1.2 Descriptive names","text":"<p>Choose descriptive and meaningful names for variables, functions, classes, and other code elements. This enhances code readability and understanding.</p>"},{"location":"coding/1.-%20Best%20Practices/BestpracticesPage/#13-clear-and-concise-comments","title":"1.3 Clear and concise comments","text":"<p>Use comments to explain the purpose and functioning of important parts of the code. Comments should be clear, concise, and kept up to date as the code evolves.</p>"},{"location":"coding/1.-%20Best%20Practices/BestpracticesPage/#14-modularization-and-code-reuse","title":"1.4 Modularization and code reuse","text":"<p>Divide your code into small, reusable modules and functions. This makes it easier to understand, maintain, and reuse code across different parts of your application.</p>"},{"location":"coding/1.-%20Best%20Practices/BestpracticesPage/#15-avoid-code-repetition-dry","title":"1.5 Avoid code repetition (DRY)","text":"<p>Do not repeat code unnecessarily. If you find repetitive logic, encapsulate it in a function or method and use it instead.</p>"},{"location":"coding/1.-%20Best%20Practices/BestpracticesPage/#avoiding-redundant-code-with-helpers-and-hooks-in-javascript","title":"Avoiding Redundant Code with Helpers and Hooks in JavaScript","text":"<p>In software development, avoiding redundant or repetitive code is crucial to maintain clean, maintainable, and efficient codebases. Two commonly used techniques to achieve this in JavaScript are using helpers and hooks.</p>"},{"location":"coding/1.-%20Best%20Practices/BestpracticesPage/#benefits-of-using-helpers-and-hooks","title":"Benefits of Using Helpers and Hooks","text":"<ul> <li>Code Reusability: Both helpers and hooks promote code reuse, reducing redundancy and maintaining a cleaner codebase.</li> <li>Maintainability: Encapsulating logic in helpers and hooks makes the code more organized and easier to maintain.</li> <li>Modularity: By breaking down functionalities into reusable units, it's easier to manage and scale the application.   By employing these techniques in your JavaScript projects, you can significantly enhance the efficiency and maintainability of your code.</li> </ul>"},{"location":"coding/1.-%20Best%20Practices/BestpracticesPage/#helpers","title":"Helpers","text":"<p>Helpers are utility functions that encapsulate reusable code, promoting code reuse and reducing redundancy. These functions typically perform specific tasks and are designed to be easily reusable across different parts of an application.</p>"},{"location":"coding/1.-%20Best%20Practices/BestpracticesPage/#helper-function-example","title":"Helper Function Example","text":"<p>Capitalize.js (Helper Function inside Helpers folder)</p> <pre><code>// Helper function to capitalize a string\nconst capitalize = (str) =&gt; {\nreturn str.charAt(0).toUpperCase() + str.slice(1);\n};\nmodule.exports = {\ncapitalize,\n};\n</code></pre> <p>In this example, we've created a capitalize helper function that capitalizes the first letter of a given string.</p> <p>main.js (Usage of the Helper Function)</p> <pre><code>const { capitalize } = require(\"./helper.js\");\nconst result = capitalize(\"hello\"); // Result: 'Hello'\nconsole.log(result);\n</code></pre> <p>In the main.js file, we import the capitalize function from the helper.js file and use it to capitalize the string 'hello'.</p> <p>To run this example, ensure both helper.js and main.js are in the same directory. Then, you can execute node main.js in the terminal to see the result.</p>"},{"location":"coding/1.-%20Best%20Practices/BestpracticesPage/#16-maintenance-and-refactoring","title":"1.6 Maintenance and refactoring","text":"<p>Dedicate regular time to review and refactor your code. Improve its structure, eliminate duplication, and make adjustments to keep it clean and efficient.</p>"},{"location":"coding/1.-%20Best%20Practices/BestpracticesPage/#17-proper-error-handling","title":"1.7 Proper error handling","text":"<p>Implement proper error handling so your code is robust and can gracefully handle unexpected situations.</p>"},{"location":"coding/1.-%20Best%20Practices/BestpracticesPage/#18-unit-testing","title":"1.8 Unit testing","text":"<p>Write unit tests to verify that each part of your code functions correctly. Automated tests are crucial to ensure that changes do not introduce errors.</p>"},{"location":"coding/1.-%20Best%20Practices/BestpracticesPage/#19-versioning-and-change-control","title":"1.9 Versioning and change control","text":"<p>Use version control systems (Github) to track and manage versions of your code. Learn to use it correctly, including branches and tags, to maintain an organized history.</p>"},{"location":"coding/1.-%20Best%20Practices/BestpracticesPage/#110-optimization-and-efficiency","title":"1.10 Optimization and efficiency","text":"<p>Optimize your code to be efficient in terms of runtime and resource usage. However, ensure that readability and maintainability are not compromised in the process.</p>"},{"location":"coding/1.-%20Best%20Practices/BestpracticesPage/#111-security","title":"1.11 Security","text":"<p>Consider security in the design and implementation of your code. Avoid common vulnerabilities and follow good security practices.</p>"},{"location":"coding/1.-%20Best%20Practices/BestpracticesPage/#112-comprehensive-documentation","title":"1.12 Comprehensive documentation","text":"<p>Provide comprehensive and clear documentation for your code, including function descriptions, parameters, return values, and any other relevant aspects.</p>"},{"location":"coding/1.-%20Best%20Practices/BestpracticesPage/#113-learn-from-feedback","title":"1.13 Learn from feedback","text":"<p>Accept and learn from feedback from other developers. Being open to improvements and learning from experiences is crucial to enhancing your coding skills.</p>"},{"location":"coding/2.-%20Github/GithubPage/","title":"Github Guidelines","text":""},{"location":"coding/2.-%20Github/GithubPage/#21-create-meaningful-repositories","title":"2.1 Create Meaningful Repositories","text":"<p>Assign descriptive and meaningful names to your repositories so that others can quickly understand their purpose.</p>"},{"location":"coding/2.-%20Github/GithubPage/#22-use-informative-readmes","title":"2.2 Use Informative READMEs","text":"<p>Create well-structured, descriptive READMEs in your repositories to provide information about the project, its installation, and usage.</p>"},{"location":"coding/2.-%20Github/GithubPage/#23-ignore-unnecessary-files","title":"2.3 Ignore Unnecessary Files","text":"<p>Use a .gitignore file to prevent unnecessary or sensitive files, such as configuration files or access keys, from being included in the repository.</p>"},{"location":"coding/2.-%20Github/GithubPage/#24-make-atomic-and-meaningful-commits","title":"2.4 Make Atomic and Meaningful Commits","text":"<p>Make small, atomic commits with descriptive messages that clearly indicate what changes were made.</p>"},{"location":"coding/2.-%20Github/GithubPage/#25-efficient-branching","title":"2.5 Efficient Branching","text":"<p>Create branches for developing new features or fixing issues. Merge these branches appropriately and delete them when no longer needed.</p>"},{"location":"coding/2.-%20Github/GithubPage/#26-utilize-pull-requests-pending","title":"2.6 Utilize Pull Requests (Pending)","text":"<p>Use pull requests to request code reviews before merging changes into the main branch. This encourages review and collaboration.</p>"},{"location":"coding/2.-%20Github/GithubPage/#27-automate-with-github-actions-pending","title":"2.7 Automate with GitHub Actions (Pending)","text":"<p>Use GitHub Actions to automate processes such as testing, deployments, and other workflow tasks.</p>"},{"location":"coding/2.-%20Github/GithubPage/#28-tag-and-organize-issues","title":"2.8 Tag and Organize Issues","text":"<p>Tag your issues to organize and prioritize work. Use labels like \"bug,\" \"enhancement,\" etc., to categorize issues.</p>"},{"location":"coding/2.-%20Github/GithubPage/#29-document-your-code","title":"2.9 Document Your Code","text":"<p>Document your code clearly and consistently so that others can easily understand its functionality and how to contribute.</p>"},{"location":"coding/2.-%20Github/GithubPage/#210-respond-to-comments-and-feedback-promptly","title":"2.10 Respond to Comments and Feedback Promptly","text":"<p>Respond to comments and feedback from collaborators or users in a timely manner. This demonstrates interest and commitment to the project.</p>"},{"location":"coding/2.-%20Github/GithubPage/#211-collaborate-respectfully","title":"2.11 Collaborate Respectfully","text":"<p>Be respectful and considerate in interactions with other collaborators, maintaining a professional and constructive tone.</p>"},{"location":"coding/2.-%20Github/GithubPage/#212-leverage-github-pages-pending","title":"2.12 Leverage GitHub Pages (Pending)","text":"<p>Use GitHub Pages to host documentation or web pages related to your project.</p>"},{"location":"coding/2.-%20Github/GithubPage/#213-security-and-privacy","title":"2.13 Security and Privacy","text":"<p>Pay attention to the security and privacy of your code. Do not share confidential information or access keys in your public repository.</p>"},{"location":"coding/2.-%20Github/GithubPage/#213-backup-and-maintain-stable-versions","title":"2.13 Backup and Maintain Stable Versions","text":"<p>Backup your code and maintain stable versions using GitHub releases and tags.</p>"},{"location":"coding/2.-%20Github/GithubPage/#214-continuous-learning-and-explore-github-features","title":"2.14 Continuous Learning and Explore GitHub Features","text":"<p>Stay updated with new GitHub features and functionalities. Leverage the tools GitHub offers to enhance your workflow.</p>"},{"location":"coding/3.-%20Estimations/EstimationsPage/","title":"Coding Estimations","text":""},{"location":"coding/3.-%20Estimations/EstimationsPage/#31-pert-estimation-formula","title":"3.1 PERT Estimation Formula","text":"<p>The PERT formula is used to estimate the probable duration of a task in project management. It takes into account three estimates: optimistic estimate (O), most likely estimate (M), and pessimistic estimate (P) to calculate a weighted estimate (E).</p> <p>The formula to calculate the weighted estimate (E) in PERT is as follows:</p> <p></p> <p>Where:</p> <ul> <li>O is the optimistic estimate (best-case scenario).</li> <li>M is the most likely estimate (the most realistic estimate based on reality and experience).</li> <li>P is the pessimistic estimate (worst-case scenario).   The PERT calculation assumes that the estimates follow a Beta distribution and uses a specific weighting to combine these three estimates. By using this formula, we aim to have a more accurate and realistic estimate by considering both optimistic and pessimistic scenarios.</li> </ul> <p>It's important to note that the PERT Formula is a tool to assist in estimation, and real-world outcomes may vary. Communication and close monitoring of project progress are essential to adjust the estimates as needed throughout the project.</p> <p>It's important to note that this formula is typically used once all the requirements for the task to be estimated are completed, providing a more accurate prediction of the task duration.</p>"},{"location":"coding/4.-%20Styling/StylingPage/","title":"Coding Styles (CSS)","text":""},{"location":"coding/4.-%20Styling/StylingPage/#41-consistent-naming-conventions","title":"4.1 Consistent Naming Conventions","text":"<p>Use meaningful and descriptive names for classes and IDs. Stick to a consistent naming convention (BEM - Block Element Modifier).</p>"},{"location":"coding/4.-%20Styling/StylingPage/#42-modularization-and-organization","title":"4.2 Modularization and Organization","text":"<p>Organize your CSS into modules based on functionality or component. Keep related styles together to improve maintainability.</p>"},{"location":"coding/4.-%20Styling/StylingPage/#43-responsive-design","title":"4.3 Responsive Design","text":"<p>Prioritize and design for mobile-first, then use media queries for larger screens. Use relative units (like percentages or ems) for layout to ensure responsiveness.</p>"},{"location":"coding/4.-%20Styling/StylingPage/#44-comments-and-documentation","title":"4.4 Comments and Documentation","text":"<p>Comment your CSS code to explain complex parts, hacks, or workarounds. Document the purpose of the styles and their expected behavior.</p>"},{"location":"coding/4.-%20Styling/StylingPage/#45-avoid-important","title":"4.5 Avoid !important","text":"<p>Minimize the use of !important to override styles, as it can make the CSS hard to manage and debug.</p>"},{"location":"coding/4.-%20Styling/StylingPage/#46-css-resets-or-normalization","title":"4.6 CSS Resets or Normalization","text":"<p>Use CSS resets or normalizations to ensure consistent rendering across different browsers.</p>"},{"location":"coding/4.-%20Styling/StylingPage/#47-performance-optimization","title":"4.7 Performance Optimization","text":"<p>Minimize CSS file size by removing unnecessary whitespace and comments. Use CSS minification techniques to reduce file size for production.</p>"},{"location":"coding/4.-%20Styling/StylingPage/#48-use-flexbox-or-grid-layouts","title":"4.8 Use Flexbox or Grid Layouts","text":"<p>Utilize Flexbox or Grid layouts for efficient and flexible page designs. Vendor Prefixes and Browser Compatibility:</p> <p>Include appropriate vendor prefixes for CSS properties to ensure cross-browser compatibility.</p>"},{"location":"coding/4.-%20Styling/StylingPage/#49-avoid-magic-numbers","title":"4.9 Avoid Magic Numbers","text":"<p>Avoid using \"magic numbers\" (hard-coded numerical values) in your styles; use variables or named constants instead.</p>"},{"location":"coding/4.-%20Styling/StylingPage/#410-css-specificity-and-selectors","title":"4.10 CSS Specificity and Selectors","text":"<p>Understand CSS specificity and use it wisely to prevent unintended styles from applying.</p>"},{"location":"coding/4.-%20Styling/StylingPage/#411-keep-it-simple","title":"4.11 Keep it Simple:","text":"<p>Follow the principle of \"Keep It Simple, Stupid (KISS)\" to maintain readability and simplicity in your styles.</p>"},{"location":"coding/4.-%20Styling/StylingPage/#412-testing-and-browser-debugging","title":"4.12 Testing and Browser Debugging","text":"<p>Regularly test your styles on different browsers and devices to ensure consistent rendering. Use browser developer tools for debugging and fine-tuning your styles. These practices will help you write clean, organized, and maintainable CSS code for your projects.</p>"}]}